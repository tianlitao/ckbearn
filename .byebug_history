c
cookies[:pub_key]
c
params[:outputs].values
params[:outputs].values.map{|i| i.deep_transform_keys(&:underscore)}.each{|i| i['type'] = nil if i['type'].blank?}
params[:outputs].values.map{|i| i.deep_transform_keys(&:underscore)}.map{|i| i['type'] = nil if i['type'].blank?}
params[:outputs].values.map{|i| i.deep_transform_keys(&:underscore)}
data
    rpc.send_transaction(data, 'passthrough')
data[:outputs][1]['type'] = nil
data[:outputs][0]['type'] = nil
data[:outputs][0]['type']
data[:outputs]
    rpc.send_transaction(data, 'passthrough')
data
params[:cellDeps].values.map{|i| i.deep_transform_keys(&:underscore)}.to_yaml
params[:cellDeps].values.map{|i| i.deep_transform_keys(&:underscore)}.to_symbol
params[:cellDeps].values.map{|i| i.deep_transform_keys(&:underscore)}.as_symbol
params[:cellDeps].values.map{|i| i.deep_transform_keys(&:underscore)}
data
    rpc.send_transaction(data, 'passthrough')
    data = {
      version: params[:version],
      cell_deps: params[:cellDeps].values.map{|i| i.deep_transform_keys(&:underscore)},
      header_deps: [],
      inputs: params[:inputs].values.map{|i| i.deep_transform_keys(&:underscore)},
      outputs: params[:outputs].values.map{|i| i.deep_transform_keys(&:underscore)},
      outputs_data: params[:outputsData],
      witnesses: params[:witnesses],
    }
    rpc.send_transaction(data, 'passthrough')
    data = { "version" => params[:version],
      "cell_deps" => params[:cellDeps].values.map{|i| i.deep_transform_keys(&:underscore)},
      "header_deps" => [],
      "inputs" => params[:inputs].values.map{|i| i.deep_transform_keys(&:underscore)},
      "outputs" => params[:outputs].values.map{|i| i.deep_transform_keys(&:underscore)},
      "outputs_data" => params[:outputsData],
      "witnesses" => params[:witnesses],
    }
data
    rpc.send_transaction(data, 'passthrough')
    data = { "version" => params[:version],
      "cell_deps" => params[:cellDeps].values.map{|i| i.deep_transform_keys(&:underscore)},
      "inputs" => params[:inputs].values.map{|i| i.deep_transform_keys(&:underscore)},
      "outputs" => params[:outputs].values.map{|i| i.deep_transform_keys(&:underscore)},
      "outputs_data" => params[:outputsData],
      "witnesses" => params[:witnesses],
    }
params[:outputsData]
params[:cellDeps].values
params[:inputs].values.map{|i| i.deep_transform_keys(&:underscore)}
params[:outputs].values[0].deep_transform_keys(&:underscore)
params[:outputs].values[0]
params[:outputs].values
params[:inputs].values.map{|i| {'previous_output' => {'tx_hash' => i['previousOutput']['txHash'], 'index' => i['previousOutput']['index']},'since' => i['since']}}
'previousOutput'.underscore
params[:inputs].values
params[:cellDeps].values.map{|i| i.transform_keys{ |key| key.to_s.underscore }}.map{|i| i["out_point"].transform_keys{ |key| key.to_s.underscore;i }}
params[:cellDeps].values.map{|i| i.transform_keys{ |key| key.to_s.underscore }}.map{|i| i["out_point"].transform_keys{ |key| key.to_s.underscore }}
params[:cellDeps].values.map{|i| i.transform_keys{ |key| key.to_s.underscore }}
params[:cellDeps].values
params[:cellDeps].values.map{|i| i.transform_keys{ |key| key.to_s.underscore }}
params[:inputs]
params[:inputs].values
params[:cellDeps].values.map{|i| i.transform_keys{ |key| key.to_s.underscore }}
params[:cellDeps].map{|i| i.transform_keys{ |key| key.to_s.underscore }}
params[:cellDeps].values[0].transform_keys{ |key| key.to_s.underscore }
params[:cellDeps].values[0]
params[:cellDeps].values.transform_keys
params[:cellDeps].values
params[:version]
    rpc.send_transaction(data, 'passthrough')
    rpc = CKB::RPC.new(host: Setting.api_rpc)
    data = { "version" => params[:version],
      "cell_deps" => params[:cellDeps].values,
      "inputs" => params[:inputs].values,
      "outputs" => params[:outputs].values,
      "outputs_data" => params[:outputsData],
      "witnesses" => params[:witnesses],
    }
    rpc.send_transaction(data, 'passthrough')
    rpc = CKB::RPC.new(host: Setting.api_rpc)
data
    data = { "version" => params[:version],
      "cellDeps" => params[:cellDeps].values,
      "inputs" => params[:inputs].values,
      "outputs" => params[:outputs].values,
      "outputsData" => params[:outputsData],
      "witnesses" => params[:witnesses],
    }
params
c
params
method
c
params
method
c
method
params
exit
params
transaction.to_raw_transaction_h
params
params = {"version"=>"0x0", "cellDeps"=>{"0"=>{"outPoint"=>{"txHash"=>"0x437d4343c1eb5901c74ba34f6e9b1a1a25d72b441659d73bb1b40e9924bda6fb", "index"=>"0x0"}, "depType"=>"dep_group"}}, "inputs"=>{"0"=>{"previousOutput"=>{"txHash"=>"0x5bbbb17f2d6d457ba1568da0530df344b6796a64148e9e6fdeb48ae044b27e09", "index"=>"0x1"}, "since"=>"0x0"}}, "outputs"=>{"0"=>{"lock"=>{"codeHash"=>"0xd23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac", "hashType"=>"type", "args"=>"0x00015e10a0cc3436e57ad8cb3a8726b51d5d27b54d26"}, "type"=>"", "capacity"=>"0x174876e800"}, "1"=>{"lock"=>{"codeHash"=>"0xd23761b364210735c19c60561d213fb3beae2fd6172743719eff6920e020baac", "hashType"=>"type", "args"=>"0x000149078e2fcd1e1b6de2e1f7aef74f0c8e681dfed5"}, "type"=>"", "capacity"=>"0x1b15b2523a35"}}, "outputsData"=>["0x", "0x"], "witnesses"=>["0x5c030000100000005c0300005c0300004803000081010001000d326d7cf28defeeb298a882af78e1b47b4ce09521622b32c8242531c56b5c4eff433371a780d054da77f4492ba8e153f7fae72a9d1bd772247bb20e721f45336592ce05d6208ff22dd22eba34930d6468a11cbcbdaec5128c9100aab84988feab36f2332f5650f02ccb3e67dcf783a57b92cea25d3c462052c0994b2f0e233ca549a6c026879bfb7a376c6df281aef1d210393761788e0cbe58d5f86c0626da33ea26f5803e659a7703a604a75a0e5e2bc66aeeb29b42a14994f814e5f84c22ff73faa0b7781ae5ce66f821899ca7f15848bc9f3d4e98efb14378f47c6da7e7e5ff94db0253290cdfaa37c7cb38c6b3c7df3247c5751e181980adcd7adcd3d3910a2852a0b29ef315b1a290daea9f026f48a7bb4d28309a9b9c8a129a4c742da49254ffe397e1d6525b9250769de2eb38e6f9715bc356f92ddf2088ba40d50d5218cb592e4f0abf5450dcbd86ef05af62a606e44d86144db7ea26e02939391d38eb0f954b8c1396a59e8b480054463f31261b46a60e556b279a9bee323a8d5dcd8111e91f38366b1ddeabf2caee34c785483aa232ef99a0774d81d7b229f8ffff14b01d868d7801b086bd5d1dec949b8b8c0a7aea2ad7bb1bc172be5b14561db1b8923868e82c4c338368092c1a252949e4da1cfcb8d98b2db24c804483dd9ed110f4fa43e9fbd14e263c0100bdf3dc3698fdb3acebe780cfa20705ede96e0588ccad8a8a935368e442543a5cf5c43e99a49ade3e263404a3ae987d7db502e796e6577a0f81b6dd81d3ea2a5807e1f1a0686d29d9583a7dd829160aa339a6390047d323dadd1edf455fbc42f9c38f3b29785a565ea5fa4096aca120580890e2cbb376522039efb2eca86c80b9a975a2a3fed2c936518905e60a99a4e229c50f085913119670aa30099572b168ab0df94c4478648f2501f5f3c823023cff3529dc1d000000007b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a224d5442684e444a6d5a445578596d466b4f544e6b4f544d78596a45794f444d334f4463774f5755315a6d55314d32466c4d3245775a444533597a686a5a6a49354e5455335a4756685a6d4e6c4e44426a4f54526c4e41222c226f726967696e223a2268747470733a2f2f6170702e6a6f7969642e646576227d"], "controller"=>"home", "action"=>"joy_tran"}
outputs_validator
transaction.to_raw_transaction_h
c
api.send_transaction(params.except(:action,:controller,:cellDeps),'passthrough')
params
api.send_transaction(params.except(:action,:controller),'passthrough')
params.except(:action,:controller)
params.except(:action)
params
api.send_transaction(params,'passthrough')
        api = CKB::RPC.new(host: Setting.api_rpc)
api.send_transaction(params,'passthrough')
api
        api = CKB::API.new(host: Setting.api_rpc)
params
exit
params
c
exit
from_block_number
fee
change_output.calculate_min_capacity(change_output_data)
outputs.sum{|output| output.calculate_min_capacity(data)}
sum_capacity
      i = gather_inputs(
        sum_capacity,
        outputs.sum{|output| output.calculate_min_capacity(data)},
        change_output.calculate_min_capacity(change_output_data),
        fee,
        from_block_number: from_block_number
      )
      i = gather_inputs(
        sum_capacity,
        outputs.sum{|output| output.calculate_min_capacity(data)},
        change_output.calculate_min_capacity(change_output_data),
        fee,
        from_block_number: from_block_number
      )
      input_capacities = i.capacities
      change_output_data = "0x"
      change_output = Types::Output.new(
        capacity: 0,
        lock: lock
      )
outputs = []
      output_data =  data
      outputs_data = []
      sum_capacity = 0
sum_capacity
      sum_capacity = 0
target_addresses_and_capacity.each do |target_address,capacity| p capacity end
capacity
target_addresses_and_capacity.each do |target_address,capacity| capacity += capacity end
target_addresses_and_capacity.each do |target_address,capacity|
target_addresses_and_capacity
capacity
change_output = Types::Output.new(
        capacity: 0,
        lock: lock
      )
      change_output_data = "0x"
change_output.calculate_min_capacity(change_output_data)
outputs.sum{|output| output.calculate_min_capacity(data)}
outputs
      outputs = []
      output_data =  data
      outputs_data = []
      capacity = 0
      key = get_key(key)
c
exit
target_addresses_and_capacity
target_addresses_and_capacity.each do |k,v| p k; p v; end
target_addresses_and_capacity.each do |k,v|
target_addresses_and_capacity
      outputs = []
      output_data =  data
      outputs_data = []
      capacity = 0
      key = get_key(key)
c
send_transaction(tx, 'passthrough')
      tx.sign(key)
        tx.cell_deps << Types::CellDep.new(out_point: api.secp_group_out_point, dep_type: "dep_group")
use_dep_group
tx = Types::Transaction.new(
        version: 0,
        cell_deps: [],
        inputs: i.inputs,
        outputs: outputs,
        outputs_data: outputs_data,
        witnesses: i.witnesses
      )
outputs_data = ['0x', '0x', '0x']
outputs_data
outputs.size
outputs
i.inputs
c
body
c
body
c
body
c
body[:params][1]
body[:params][0]
body[:params].size
body[:params]
body.keys
body
uri
body
c
body
c
uri
c
uri
request_path
body
c
request_path
body
c
@sign_in_token
SignInToken.last
sign_in_token
exit
a['signInToken']
a
c
    token = SignInToken.find_by(token: cookies[:signInToken])
current_user
exit
SignInToken.first.update(user_id: 1)
SignInToken.first
User.first
SignInToken.first
SignInToken.last
current_user
c
