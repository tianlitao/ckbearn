c
exit
from_block_number
fee
change_output.calculate_min_capacity(change_output_data)
outputs.sum{|output| output.calculate_min_capacity(data)}
sum_capacity
      i = gather_inputs(
        sum_capacity,
        outputs.sum{|output| output.calculate_min_capacity(data)},
        change_output.calculate_min_capacity(change_output_data),
        fee,
        from_block_number: from_block_number
      )
      i = gather_inputs(
        sum_capacity,
        outputs.sum{|output| output.calculate_min_capacity(data)},
        change_output.calculate_min_capacity(change_output_data),
        fee,
        from_block_number: from_block_number
      )
      input_capacities = i.capacities
      change_output_data = "0x"
      change_output = Types::Output.new(
        capacity: 0,
        lock: lock
      )
outputs = []
      output_data =  data
      outputs_data = []
      sum_capacity = 0
sum_capacity
      sum_capacity = 0
target_addresses_and_capacity.each do |target_address,capacity| p capacity end
capacity
target_addresses_and_capacity.each do |target_address,capacity| capacity += capacity end
target_addresses_and_capacity.each do |target_address,capacity|
target_addresses_and_capacity
capacity
change_output = Types::Output.new(
        capacity: 0,
        lock: lock
      )
      change_output_data = "0x"
change_output.calculate_min_capacity(change_output_data)
outputs.sum{|output| output.calculate_min_capacity(data)}
outputs
      outputs = []
      output_data =  data
      outputs_data = []
      capacity = 0
      key = get_key(key)
c
exit
target_addresses_and_capacity
target_addresses_and_capacity.each do |k,v| p k; p v; end
target_addresses_and_capacity.each do |k,v|
target_addresses_and_capacity
      outputs = []
      output_data =  data
      outputs_data = []
      capacity = 0
      key = get_key(key)
c
send_transaction(tx, 'passthrough')
      tx.sign(key)
        tx.cell_deps << Types::CellDep.new(out_point: api.secp_group_out_point, dep_type: "dep_group")
use_dep_group
tx = Types::Transaction.new(
        version: 0,
        cell_deps: [],
        inputs: i.inputs,
        outputs: outputs,
        outputs_data: outputs_data,
        witnesses: i.witnesses
      )
outputs_data = ['0x', '0x', '0x']
outputs_data
outputs.size
outputs
i.inputs
c
body
c
body
c
body
c
body[:params][1]
body[:params][0]
body[:params].size
body[:params]
body.keys
body
uri
body
c
body
c
uri
c
uri
request_path
body
c
request_path
body
c
@sign_in_token
SignInToken.last
sign_in_token
exit
a['signInToken']
a
c
    token = SignInToken.find_by(token: cookies[:signInToken])
current_user
exit
SignInToken.first.update(user_id: 1)
SignInToken.first
User.first
SignInToken.first
SignInToken.last
current_user
c
